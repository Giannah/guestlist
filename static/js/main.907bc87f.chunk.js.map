{"version":3,"sources":["components/Table.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","guestData","map","row","index","key","lastname","firstname","table","onClick","removeGuest","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_e$target","target","name","value","setState","defineProperty","submitForm","addGuest","state","initialState","_this$state","type","onChange","App","guests","filter","guest","i","concat","toConsumableArray","className","components_Table","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.907bc87f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst TableHeader = () => {\n\treturn (\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Nom</th>\n\t\t\t\t<th>Prénom</th>\n\t\t\t\t<th>Table</th>\n\t\t\t\t<th>Enlever</th>\n\t\t\t</tr>\n\t\t</thead>\n\t);\t\n}\n\nconst TableBody = props => {\n\tconst rows = props.guestData.map((row, index) => {\n\t\treturn (\n\t\t\t<tr key={index}>\n\t\t\t\t<td>{row.lastname}</td>\n\t\t\t\t<td>{row.firstname}</td>\n\t\t\t\t<td>{row.table}</td>\n\t\t\t\t<td><button onClick={() => props.removeGuest(index)}>Supprimer</button></td>\n\t\t\t</tr>)\n\t})\n\treturn (\n\t\t<tbody>{rows}</tbody>\n\t);\n}\n\nclass Table extends Component {\n\n\n\trender() {\n\n\t\tconst { guestData, removeGuest } = this.props;\n\n\t\treturn (\n\t\t\t<table>\n\t\t\t\t<TableHeader />\n\t\t\t\t<TableBody \n\t\t\t\t\tguestData={guestData} \n\t\t\t\t\tremoveGuest={removeGuest}\n\t\t\t\t/>\n\t\t\t</table>\n\t\t\n\t\t);\n\t}\n}\n\nexport default Table;","import React, { Component } from 'react';\n\nclass Form extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.initialState = {\n\t\t\tlastname: '',\n\t\t\tfirstname: '',\n\t\t\ttable: 'Diamant'\n\t\t};\n\n\t\tthis.state= this.initialState;\n\t}\n\n\thandleChange = e => {\n\t\tconst {name, value} = e.target;\n\n\t\tthis.setState({\n\t\t\t[name]: value\n\t\t});\n\t}\n\n\tsubmitForm = () => {\n\t\tthis.props.addGuest(this.state);\n\t\tthis.setState(this.initialState);\n\t}\n\n\trender() {\n\t\tconst { lastname, firstname, table} = this.state;\n\n\t\treturn (\n\t\t\t<form>\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Ajouter un nouvel invité à la liste</legend>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<label>Nom</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"lastname\"\n\t\t\t\t\t\t\t\tvalue={lastname}\n\t\t\t\t\t\t\t\tonChange={this.handleChange} />\n\t\t\t\t\t\t\t<label>Prénom</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"firstname\"\n\t\t\t\t\t\t\t\tvalue={firstname}\n\t\t\t\t\t\t\t\tonChange={this.handleChange} />\n\t\t\t\t\t\t\t<label>Table</label>\n\t\t\t\t\t\t\t<select name=\"table\" value={table} onChange={this.handleChange}>\n\t\t\t\t\t\t\t\t<option value=\"Rubis\">Rubis</option>\n\t\t\t\t\t\t\t\t<option value=\"Jade\">Jade</option>\n\t\t\t\t\t\t\t\t<option value=\"Diamant\">Diamant</option>\n\t\t\t\t\t\t\t\t<option value=\"Améthyste\">Améthyste</option>\n\t\t\t\t\t\t\t\t<option value=\"Saphir\">Saphir</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tvalue=\"Ajouter\"\n\t\t\t\t\t\t\t\tonClick={this.submitForm} />\n\t\t\t\t\t\t</p>\n\n\t\t\t\t</fieldset>\n\t\t\t</form>\n\n\t\t)\n\t}\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport Table from './components/Table';\nimport Form from './components/Form';\n//import Header from './components/Header';\n\n\nclass App extends Component {\n  state = {\n    guests: []\n  };\n\n  removeGuest = index => {\n    const { guests } = this.state;\n\n    this.setState ({\n      guests: guests.filter((guest, i) => {\n        return i !== index;\n      })\n    });\n  }\n\n  addGuest = guest => {\n    this.setState({guests: [...this.state.guests, guest]});\n  }\n\n  render() {\n    const { guests } = this.state;\n\n    return ( \n      <div className=\"container\">\n        <header>\n          <h1>Mariage de Sierra & David</h1>\n        </header>\n        \n        \n          <h2>Liste des invités</h2>\n       \n          <Table \n            guestData={guests} \n            removeGuest={this.removeGuest} \n          />\n\n          <Form addGuest={this.addGuest} />\n\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}